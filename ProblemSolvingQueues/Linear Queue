#include<stdio.h>
#include<stdlib.h>
#include<time.h>

#define SIZE 100

typedef char element;

typedef struct QueueType {
	element elem[SIZE];
	int front, rear;
}QueueType;

void initQueue(QueueType* Q) {
	Q->front = -1;
	Q->rear = -1;

}

int isEmpty(QueueType* Q) {
	return Q->front == Q->rear;
}

int isFull(QueueType* Q) {
	return Q->rear == SIZE-1;
}

void enqueue(QueueType* Q, char e) {
	if (isFull(Q)) {
		printf("FULL\n");
		return;
	}
	Q->rear++;
	Q->elem[Q->rear] = e;
}

element dequeue(QueueType* Q) {
	if (isEmpty(Q)) {
		printf("Empty\n");
		return 0;
	}
	Q->front++;
	return Q->elem[Q->front];
}

element peek(QueueType* Q) {
	if (isEmpty(Q)) {
		printf("Empty\n");
		return 0;
	}
	
	return Q->elem[Q->front+1];
}

void print(QueueType* Q) {
	printf("front pos : %d, rear pos : %d\n", Q->front, Q->rear);

	if (!isEmpty(Q)) {
		for (int i = Q->front + 1; i <= Q->rear; i++) {
			printf("[%c] ", Q->elem[i]);
		}
		printf("\n");
	}
}


int main() {
	
	QueueType Q;
	initQueue(&Q);
	srand(time(NULL));

	for (int i = 0; i < 7; i++) {
		enqueue(&Q, rand() % 26 +65);
	}
	
	print(&Q);
	
	
	for (int i = 0; i < 3; i++) {
		printf("[%c] ", dequeue(&Q));
	}
	printf("\n\n");
	print(&Q);
	
	printf("[%c]\n", peek(&Q));
	printf("\n");
	print(&Q);

	for (int i = 0; i < 5; i++) {
		enqueue(&Q, rand() % 26 + 65);
	}

	print(&Q);
	for (int i = 0; i < 3; i++) {
		printf("[%c] ", dequeue(&Q));
	}
	printf("\n\n");
	print(&Q);


	return 0;
}
