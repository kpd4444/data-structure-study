#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 10

typedef char element;

typedef struct DequeType {
    element elem[SIZE];
    int front, rear;

}DequeType;

void initDeque(DequeType* D)
{
    D->front = D->rear = 0; // 0부터 시작
}

int isEmpty(DequeType* D)
{
    return D->front == D->rear;
}

int isFull(DequeType* D)
{
    return (D->rear + 1) % SIZE == D->front; // 포화상태
}


void addRear(DequeType* D, char e)
{
    if (isFull(D))
    {
        printf("FULL\n");
        return;
    }
    D->rear = (D->rear + 1) % SIZE;
    D->elem[D->rear] = e;
}

void addFront(DequeType* D,char e) {
    if (isFull(D)) {
        printf("Full");
        return;
    }
    D->elem[D->front] = e;
    D->front = (D->front - 1 + SIZE) % SIZE;
}



void print(DequeType* D)
{
    printf("front pos : %d, rear pos : %d\n", D->front, D->rear);

    if (!isEmpty(D))
    {
        int i = D->front;
        do
        {
            i = (i + 1) % SIZE;
            printf("[%c] ", D->elem[i]);
            if (i == D->rear)
                break;
        } while (i != D->front);

    }
    printf("\n");
}



element deleteFront(DequeType* D)
{
    if (isEmpty(D))
    {
        printf("Empty\n");
        return 0;
    }
    D->front = (D->front + 1) % SIZE;
    return D->elem[D->front];
}

element deleteRear(DequeType* D)
{
    if (isEmpty(D))
    {
        printf("Empty\n");
        return 0;
    }
    element e = D->elem[D->rear];
    D->rear = (D->rear - 1+SIZE) % SIZE;
    return e;
}

element getFront(DequeType* D)
{
    if (isEmpty(D))
    {
        printf("Empty\n");
        return 0;
    }
    return D->elem[(D->front + 1) % SIZE];
}

element getRear(DequeType* D)
{
    if (isEmpty(D))
    {
        printf("Empty\n");
        return 0;
    }
    element e = D->elem[D->rear];
    
    return e;
}

int main()
{
    DequeType D;
    initDeque(&D);
    srand(time(NULL));

    for (int i = 0; i < 7; i++)
        addRear(&D, rand() % 26 + 65);

    print(&D);

    for (int i = 0; i < 3; i++)
        printf("[%c] ", deleteFront(&D)); // dequeue를 한다고 배열안의 값이 삭제되는것이아닌 넘어가는것
    printf("\n\n");
    print(&D);

    

    for (int i = 0; i < 5; i++)
        addFront(&D, rand() % 26 + 65);

    print(&D);

    for (int i = 0; i < 3; i++)
        printf("[%c] ", deleteRear(&D));
    printf("\n\n");
    print(&D);

    return 0;
}
