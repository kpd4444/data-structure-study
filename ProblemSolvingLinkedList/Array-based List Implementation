#include<stdio.h>
#include<stdlib.h>

typedef int element;

#define N 100

typedef struct ListType {
	int size;
	element data[N];
}ListType;

void init(ListType* L) {
	L->size = 0;
}

int isEmpty(ListType* L) {
	return L->size == 0;
}

int isFull(ListType* L) {
	return L->size == N;
}

void insertLast(ListType* L, element e) {
	if (isFull(L)) {
		return;
	}
	L->data[L->size] = e;
	L->size++;
}

void insert(ListType* L, int pos, element e) {
	if (isFull(L)) {
		return;
	}
	if (pos<0 || pos>L->size) {
		return;
	}
	for (int i = L->size - 1; i >= pos; i--) {
		L->data[i + 1] = L->data[i];
	}
	L->data[pos] = e;
	L->size++;
}

element deleteLast(ListType* L) {
	if (isEmpty(L)) {
		return -1;
	}
	L->size--;
	return L->data[L->size];
}

element deletePos(ListType* L, int pos) {
	if (isEmpty(L)) {
		return -1;
	}
	if (pos<0 || pos >= L->size) {
		return -1;
	}
	element e = L->data[pos];
	for (int i = pos + 1; i < L->size; i++) {
		L->data[i - 1] = L->data[i];
	}
	L->size--;

	return e;
}

void print(ListType* L) {
	for (int i = 0; i < L->size; i++) {
		printf("[%d] ", L->data[i]);
	}
	printf("\n");
}

int main() {
	ListType L;
	init(&L);

	insertLast(&L, 10); print(&L);
	insertLast(&L, 20); print(&L);
	insertLast(&L, 30); print(&L);

	printf("\n");

	insert(&L, 1, 40); print(&L);
	insert(&L, 0, 50); print(&L);
	insert(&L, L.size, 60); print(&L);
	
	printf("[%d] is deleted.", deleteLast(&L)); print(&L);
	printf("[%d] is deleted.", deletePos(&L, 2)); print(&L);

	return 0;
}
